// Generated by CoffeeScript 1.3.3
(function() {
  var async, chain, components, hogan, layout, renderFun, templates, utils, view, views,
    __slice = [].slice;

  hogan = require('hogan.js');

  layout = require('express-layout');

  view = layout.view;

  utils = require('livelyutils');

  async = require('async');

  renderFun = function(template, data, cb) {
    return cb(null, (hogan.compile(template)).render(data));
  };

  chain = function() {
    var middlewares;
    middlewares = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(req, res, next) {
      var forEach;
      forEach = function(each, cb) {
        return each(req, res, cb);
      };
      return async.forEachSeries(middlewares, forEach, next);
    };
  };

  templates = {};

  templates.base = "<!DOCTYPE html>\n<html>\n  <head>\n    {{{head}}}\n  </head>\n  <body>\n    {{{body}}}\n  </body>\n</html>";

  templates.head = "<title>{{title}}</title>\n{{#js}}\n<script type=\"text/javascript\" src=\"{{.}}\"></script>\n{{/js}}\n{{#css}}\n<link rel=\"stylesheet\" href=\"{{.}}\">\n{{/css}}";

  views = {};

  views.base = function() {
    return view({
      template: templates.base,
      renderFun: renderFun,
      requires: ["head", "body"]
    });
  };

  views.head = function() {
    var headerData;
    headerData = {
      js: [],
      css: [],
      title: "Default"
    };
    return view({
      template: templates.head,
      renderFun: renderFun,
      data: headerData,
      addJs: function(js) {
        return headerData.js = headerData.js.concat(js);
      },
      addCSS: function(css) {
        return headerData.css = headerData.css.concat(css);
      },
      title: function(title) {
        if (title) {
          return headerData.title = title;
        } else {
          return headerData.title;
        }
      },
      addTitle: function(title) {
        return headerData.title = headerData.title + title;
      }
    });
  };

  components = {};

  components.base = function(req, res, next) {
    var base, head;
    base = views.base();
    head = views.head();
    base.subview('head', head);
    res.rootView(base);
    res.view('head', head);
    return next();
  };

  module.exports = {
    components: components,
    views: views
  };

}).call(this);
